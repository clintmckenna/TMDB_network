knitr::opts_chunk$set(echo = TRUE)
# load packages
library(tidyverse)
install.packages
install.packages('jsonlite')
install.packages("jsonlite")
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
# read in data
credits <- read.csv('../data/raw/tmdb_5000_credits.csv')
View(credits)
movies <- read.csv('../data/raw/tmdb_5000_movies.csv')
View(movies)
View(movies)
?fromJSON
actors <- fromJSON(credits$cast)
actors <- credits %>%
fromJSON(cast)
# load packages
library(jsonlite)
library(tidyverse)
actors <- credits %>%
fromJSON(cast)
actors <- credits[1,] %>%
fromJSON(cast)
fromJSON(credits$cast[1])
credits$cast[1]
str(credits$cast)
actors <- credits %>%
filter(nchar(cast)>2) %>%     # fiter out blank keywords field
mutate(                           # create a new field
js = lapply(cast, fromJSON) #   containing a LIST of keyword and value pairs
) %>%                             #   called id and name
unnest(js) %>%                    # turn each keyword/value pairs in the LIST into a row
select(id, title, cast = name)
fromJSON(as.character(credits$cast[1]))
fromJSON(as.character(credits$cast))
actors <- credits %>%
mutate(cast = as.character(cast)) %>%
mutate(                           # create a new field
js = lapply(cast, fromJSON) #   containing a LIST of keyword and value pairs
) %>%                             #   called id and name
unnest(js) %>%                    # turn each keyword/value pairs in the LIST into a row
select(id, title, cast=name)
actors <- credits %>%
mutate(cast = as.character(cast)) %>%
filter(nchar(cast)>2) %>%
mutate(                           # create a new field
js = lapply(cast, fromJSON) #   containing a LIST of keyword and value pairs
) %>%                             #   called id and name
unnest(js) %>%                    # turn each keyword/value pairs in the LIST into a row
select(id, title, cast=name)
View(actors)
actors <- credits %>%
mutate(cast = as.character(cast)) %>%
filter(nchar(cast)>2) %>%
mutate(js = lapply(cast, fromJSON)) %>%
unnest(js)
# preview data
head(actors)
names(actors)
# preview data
names(actors)
# preview data
names(actors)
head(actors)
# select only interesting vars
actors <- actors %>%
select(movie_id, title, name, character, gender, acotr_id = id)
head(actors)
# extract cast data
# for this, I adapted code from this kaggle kernel:
# https://www.kaggle.com/epfreed/tidydata-movie-dataset-exploration
actors <- credits %>%
mutate(cast = as.character(cast)) %>%
filter(nchar(cast)>2) %>%
mutate(js = lapply(cast, fromJSON)) %>%
unnest(js)
# preview data
names(actors)
head(actors)
# select only interesting vars
actors <- actors %>%
select(movie_id, title, name, character, gender, actor_id = id)
head(actors)
names(movies)
head(movies)
names(movies)
View(movies)
# remove credits dataframe
rm(credits)
movies$genres %>% heaf
movies$genres %>% head
# genres
genres <- movies %>%
select(genres) %>%
mutate(genres = as.character(genres)) %>%
filter(nchar(genres)>2) %>%
mutate(js = lapply(genres, fromJSON)) %>%
unnest(js)
head(genres)
names(movies)
# genres
genres <- movies %>%
select(id, title, genres) %>%
mutate(genres = as.character(genres)) %>%
filter(nchar(genres)>2) %>%
mutate(js = lapply(genres, fromJSON)) %>%
unnest(js)
head(genres)
# functions
select <- dplyr::select
# genres
genres <- movies %>%
select(id, title, genres) %>%
mutate(genres = as.character(genres)) %>%
filter(nchar(genres)>2) %>%
mutate(js = lapply(genres, fromJSON)) %>%
unnest(js) %>%
select(id, title, genre = name)
View(genres)
keywords <- movies %>%
select(id, title, keywords) %>%
mutate(keywords = as.character(keywords)) %>%
filter(nchar(keywords)>2) %>%
mutate(js = lapply(keywords, fromJSON)) %>%
unnest(js)
head(keywords)
# keywords
keywords <- movies %>%
select(id, title, keywords) %>%
mutate(keywords = as.character(keywords)) %>%
filter(nchar(keywords)>2) %>%
mutate(js = lapply(keywords, fromJSON)) %>%
unnest(js) %>%
select(id, title, keyword = name)
head(keywords)
names(movies)
# production companies
companies <- movies %>%
select(id, title, production_companies) %>%
mutate(companies = as.character(production_companies)) %>%
filter(nchar(companies)>2) %>%
mutate(js = lapply(companies, fromJSON)) %>%
unnest(js) %>%
select(id, title, companies = name)
View(companies)
n_distinct(companies$companies)
names(movies)
# production countries
countries <- movies %>%
select(id, title, production_countries) %>%
mutate(countries = as.character(production_countries)) %>%
filter(nchar(countries)>2) %>%
mutate(js = lapply(countries, fromJSON)) %>%
unnest(js) %>%
select(id, title, countries = name)
View(countries)
# spoken languages
languages <- movies %>%
select(id, title, spoken_languages) %>%
mutate(languages = as.character(spoken_languages)) %>%
filter(nchar(languages)>2) %>%
mutate(js = lapply(languages, fromJSON)) %>%
unnest(js) %>%
select(id, title, languages = name)
View(languages)
names(movies)
head(movies)
# remove JSON columns
movies <- movies %>%
select(-genres, -keywords, -production_companies, -production_countries, -spoken_languages)
movies %>% head
cor.test(movies$budget, movies$popularity)
plot(movies$budget, movies$popularity)
max(movies$budget)
View(movies)
# save as csv
write.csv(movies, '../data/clean/movies.csv')
# save as csv
write.csv(movies, '../data/clean/movies.csv')
write.csv(actors, '../data/clean/actors.csv')
write.csv(companies, '../data/clean/companies.csv')
write.csv(countries, '../data/clean/countries.csv')
write.csv(genres, '../data/clean/genres.csv')
write.csv(keywords, '../data/clean/keywords.csv')
write.csv(languages, '../data/clean/languages.csv')
# remote datasets from memory
rm(actors, companies, countries, genres, keywords, languages, movies)
library(readr)
actors <- read_csv("data/clean/actors.csv")
View(actors)
L�a Seydoux
actors %>% filter(name == L�a Seydoux)
actors %>% filter(name == 'L�a Seydoux)'
actors %>% filter(name == 'L�a Seydoux')
actors[120,]
actors %>% filter(name == "L\xe9a Seydoux")
actors %>% filter(name == "L\\xe9a Seydoux")
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(jsonlite)
library(tidyverse)
# functions
select <- dplyr::select
# read in data
credits <- read.csv('../data/raw/tmdb_5000_credits.csv', fileEncoding = 'UTF-8')
movies <- read.csv('../data/raw/tmdb_5000_movies.csv', fileEncoding = 'UTF-8')
# extract cast data
# for this, I adapted code from Eric Freed in this kaggle kernel:
# https://www.kaggle.com/epfreed/tidydata-movie-dataset-exploration
actors <- credits %>%
mutate(cast = as.character(cast)) %>%
filter(nchar(cast)>2) %>%
mutate(js = lapply(cast, fromJSON)) %>%
unnest(js)
# column names
names(actors)
# select only interesting vars
actors <- actors %>%
select(movie_id, title, name, character, gender, actor_id = id)
# preview data
head(actors)
# remove credits dataframe
rm(credits)
# genres
genres <- movies %>%
select(id, title, genres) %>%
mutate(genres = as.character(genres)) %>%
filter(nchar(genres)>2) %>%
mutate(js = lapply(genres, fromJSON)) %>%
unnest(js) %>%
select(id, title, genre = name)
# keywords
keywords <- movies %>%
select(id, title, keywords) %>%
mutate(keywords = as.character(keywords)) %>%
filter(nchar(keywords)>2) %>%
mutate(js = lapply(keywords, fromJSON)) %>%
unnest(js) %>%
select(id, title, keyword = name)
# production companies
companies <- movies %>%
select(id, title, production_companies) %>%
mutate(companies = as.character(production_companies)) %>%
filter(nchar(companies)>2) %>%
mutate(js = lapply(companies, fromJSON)) %>%
unnest(js) %>%
select(id, title, companies = name)
# production countries
countries <- movies %>%
select(id, title, production_countries) %>%
mutate(countries = as.character(production_countries)) %>%
filter(nchar(countries)>2) %>%
mutate(js = lapply(countries, fromJSON)) %>%
unnest(js) %>%
select(id, title, countries = name)
# spoken languages
languages <- movies %>%
select(id, title, spoken_languages) %>%
mutate(languages = as.character(spoken_languages)) %>%
filter(nchar(languages)>2) %>%
mutate(js = lapply(languages, fromJSON)) %>%
unnest(js) %>%
select(id, title, languages = name)
# remove JSON columns
movies <- movies %>%
select(-genres, -keywords, -production_companies, -production_countries, -spoken_languages)
# save as csv
write.csv(movies, '../data/clean/movies.csv')
write.csv(actors, '../data/clean/actors.csv')
write.csv(companies, '../data/clean/companies.csv')
write.csv(countries, '../data/clean/countries.csv')
write.csv(genres, '../data/clean/genres.csv')
write.csv(keywords, '../data/clean/keywords.csv')
write.csv(languages, '../data/clean/languages.csv')
# remote datasets from memory
rm(actors, companies, countries, genres, keywords, languages, movies)
library(readr)
actors <- read_csv("data/clean/actors.csv")
View(actors)
actors[120,]
rm(actors)
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(jsonlite)
library(tidyverse)
# functions
select <- dplyr::select
# read in data
credits <- read.csv('../data/raw/tmdb_5000_credits.csv')
movies <- read.csv('../data/raw/tmdb_5000_movies.csv')
# extract cast data
# for this, I adapted code from Eric Freed in this kaggle kernel:
# https://www.kaggle.com/epfreed/tidydata-movie-dataset-exploration
actors <- credits %>%
mutate(cast = as.character(cast)) %>%
filter(nchar(cast)>2) %>%
mutate(js = lapply(cast, fromJSON)) %>%
unnest(js)
# column names
names(actors)
# select only interesting vars
actors <- actors %>%
select(movie_id, title, name, character, gender, actor_id = id)
# preview data
head(actors)
# remove credits dataframe
rm(credits)
# genres
genres <- movies %>%
select(id, title, genres) %>%
mutate(genres = as.character(genres)) %>%
filter(nchar(genres)>2) %>%
mutate(js = lapply(genres, fromJSON)) %>%
unnest(js) %>%
select(id, title, genre = name)
# keywords
keywords <- movies %>%
select(id, title, keywords) %>%
mutate(keywords = as.character(keywords)) %>%
filter(nchar(keywords)>2) %>%
mutate(js = lapply(keywords, fromJSON)) %>%
unnest(js) %>%
select(id, title, keyword = name)
# production companies
companies <- movies %>%
select(id, title, production_companies) %>%
mutate(companies = as.character(production_companies)) %>%
filter(nchar(companies)>2) %>%
mutate(js = lapply(companies, fromJSON)) %>%
unnest(js) %>%
select(id, title, companies = name)
# production countries
countries <- movies %>%
select(id, title, production_countries) %>%
mutate(countries = as.character(production_countries)) %>%
filter(nchar(countries)>2) %>%
mutate(js = lapply(countries, fromJSON)) %>%
unnest(js) %>%
select(id, title, countries = name)
# spoken languages
languages <- movies %>%
select(id, title, spoken_languages) %>%
mutate(languages = as.character(spoken_languages)) %>%
filter(nchar(languages)>2) %>%
mutate(js = lapply(languages, fromJSON)) %>%
unnest(js) %>%
select(id, title, languages = name)
# remove JSON columns
movies <- movies %>%
select(-genres, -keywords, -production_companies, -production_countries, -spoken_languages)
# save as csv
write.csv(movies, '../data/clean/movies.csv')
write.csv(actors, '../data/clean/actors.csv')
write.csv(companies, '../data/clean/companies.csv')
write.csv(countries, '../data/clean/countries.csv')
write.csv(genres, '../data/clean/genres.csv')
write.csv(keywords, '../data/clean/keywords.csv')
write.csv(languages, '../data/clean/languages.csv')
# remote datasets from memory
rm(actors, companies, countries, genres, keywords, languages, movies)
